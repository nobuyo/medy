#!/usr/bin/env bash

# medy: package manager for Cygwin

# The MIT License (MIT)
#
# Copyright (c) 2015-2016 nobuyo
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

# # for debug
# exec 2> tmp.log
# set -vx

# # using GNU sed (for dev)
# function sed {
#   case `uname` in
#     Darwin) # mac os
#       /usr/local/bin/gsed "$@" ;;
#     *)
#       /usr/bin/sed "$@" ;;
#   esac
# }

#> echo export DEPLOY='true'
export DEPLOY=true
#> cat ./bin/common.sh | perl -ne 'print unless /^#!/'

function get_fullpath {
  echo $(cd $(dirname $0); pwd)
}

lab_dir=$(get_fullpath ${BASH_SOURCE:-$0})
medy="$lab_dir"/$(basename $0)

function warn {
  # color:yellow
  echo -e "\033[33mWarning\033[m" "$*"
}

function error {
  # color:red
  echo -e "\033[31mError\033[m" "$*"
}

function success {
  # color:green
  echo -e "\033[32mSuccess\033[m" "$*"
}

function where_mirror {
  echo "Mirror server: $1"
}

function where_dir {
  echo "Cache directory: $1"
}

function cygwin_arch {
  # arch | awk '{sub("i686", "x86"); print $0;}'
  uname -m | awk '{sub("i686", "x86"); print $0;}'
}

function encode_mirror_url {
  echo "$1" | sed -e "s/:/%3a/g" -e "s:/:%2f:g"
}

function is-available {
  which "$1" &>/dev/null
  return $?
}

function checkpackages {
  if [ $# -eq 0 ]; then
    echo Nothing to do, exiting
    exit 0
  fi
}

function get {
  if is-available "wget" && [ $noisy_view = 1 ]; then
    command wget "$@"
  # elif is-available "curl"; then
  #   command curl -O "${@:2}"
  elif is-available "wget" && [ $noisy_view = 0 ]; then
    command wget "$@" &>/dev/null
  else
    warn wget is not installed, using lynx as fallback
    set "${*: -1}"
    lynx -source "$1" > "${1##*/}"
  fi
}

function setlab {
  # get mirror and cache dir from local
  #default
  mirror=ftp://ftp.iij.ad.jp/pub/cygwin/
  cache=~/medycache
  arch="$(cygwin_arch)"

  if [ -e /etc/setup/last-mirror ]; then
    mirror="$(head -1 /etc/setup/last-mirror)"
  elif [ -e /etc/setup/setup.rc ]; then
    mirror="$(awk '/last-mirror/ {getline; print $1}' /etc/setup/setup.rc)"
  fi

  dir="$(encode_mirror_url "$mirror")"

  if [ -e /etc/setup/last-cache ]; then
    cache="$(cygpath -au "$(head -1 /etc/setup/last-mirror)")"
  elif [ -e /etc/setup/setup.rc ]; then
    cache="$(cygpath -au "$(awk '/last-cache/ {getline; print $1}' /etc/setup/setup.rc)")"
  fi

  if [ $noisy_view = 1 ]; then
    where_mirror $mirror
    where_dir $cache
  fi

  mkdir -p "$cache/$dir$arch"
  cd "$cache/$dir$arch"
  if [ -e setup.ini ]; then
    export SETUP_INI_FILE_PATH=$cache/$dir/$arch/setup.ini
    return 0
  else
    getsetup
    export SETUP_INI_FILE_PATH=$cache/$dir/$arch/setup.ini
    return 1
  fi
}

function getsetup {
  touch setup.ini
  mv setup.ini setup.ini-save
  get -N $mirror$arch/setup.bz2
  if [ -e setup.bz2 ]; then
    bunzip2 setup.bz2
    mv setup setup.ini
    success "Updated setup.ini"
  else
    error "Updateing setup.ini, reverting"
    mv setup.ini-save setup.ini
  fi
}

function ask_user {
  while true
  do
    [ -n "$2" ] && { local pmt="$2"; local def=; }
    [ -n "$2" ] || { local pmt="y/n";local def=; }
    [ $YES_TO_ALL = 1 ] && { local RPY=Y;local def=Y; }
    [ -z "$def" ] && { echo -ne "$1 ";read -p "[$pmt] " RPY; }
    [ -z "$RPY" ] && { local RPY=$def; }
    case "$RPY" in
      Y*|y*) return 0 ;;
      N*|n*) return 1 ;;
         1*) return 0 ;;
         2*) return 1 ;;
    esac
  done
}
#> cat ./bin/medy-*.sh | perl -ne 'print unless /^#!/'

function medy-doctor {
  # check dependencies of installed packages
  local installed="$(awk '{print $1}' /etc/setup/installed.db | tail -n +2 | grep -v '^lib' )"
  local checklist=()
  local pkg
  local ready=1

  echo -n "Checking packages availablity.... "

  for pkg in $installed;
  do
    is-available $pkg || { #medy-info $pkg &>/dev/null || {
        echo "$pkg is not available"
        ready=0
    }
  done

  if [ "$ready" = 1 ]; then
    echo -e "\033[32mOK!\033[m"
  fi

  echo -n "Checking update.... "
  ready=1

  wget -q https://raw.githubusercontent.com/nobuyo/medy/master/medy -O - |\
   ( cat $medy | diff /dev/fd/3 -) 3<&0 &>/dev/null ||
  {
    echo;
    warn ":medy has update, please run \"medy upgrade-self\""
    ready=0
  }

  if [ "$ready" = 1 ]; then
    echo -e "\033[32mOK!\033[m"
  fi
}

function medy-find {
  medy-search "$@"
}

function medy-help {
  usage
}

function usage {
  echo "medy: Install and remove Cygwin package"
  echo ""
  echo "  \"medy install <package names>\"  to install packages"
  echo "  \"medy resume-install\"           to resume interrupted installing"
  echo "  \"medy (remove|uninstall) <pkg>\" to remove packages"
  echo "  \"medy update\"                   to update setup.ini"
  echo "  \"medy upgrade <package name>\"   to upgrade packages"
  echo "  \"medy list\"                     to show installed packages"
  echo "  \"medy (search|find) <patterns>\" to find packages"
  echo "  \"medy info <package name>\"      to show package infomation"
  echo "  \"medy upgrade-self\"             to upgrade medy"
  echo ""
  echo "Options:"
  echo "  --force               : force install/remove/"
  echo "  --mirror, -m <url>    : set mirror server"
  echo "  --verbose, -v         : show process info"
  echo "  --local               : find package from local"
  echo "  --dry-run"
  echo "  --help"
  echo "  --version"
}

function info-self {
  medy-version

  setlab
  echo -n "  " ;where_mirror $mirror
  echo -n "  " ;where_dir $cache
  exit 0
}

function medy-info {
  if [ $# -eq 0 ]; then
    info-self
  fi

  setlab
  export SETUP_INI_FILE_PATH=$cache/$dir$arch/setup.ini

  local info="$(grep -wA10 "^@ $1$" $cache/$dir$arch/setup.ini |\
  sed -e 's/^@\s//g' |\
  grep -v 'ldesc\|install:\|source:' |\
  sed '/prev/,+2d' |\
  sed -e 's/category: //g' -e 's/sdesc: //g' |\
  sed  -e 's/"//g' -e 's/requires: //g' -e 's/version: //g' -e 's/\\n//g')"

  if [ "$info" == "" ]; then
    error "Unable to find $1"
    return 1
  fi

  local current_version="$(grep "^$1" /etc/setup/installed.db | head -1 | awk '{print $2}')"

  local info_desc="$(setup-parser $1 sdesc)"
  local info_version="$(setup-parser $1 version)"
  local info_require="$(setup-parser $1 requires)"
  local info_category="$(setup-parser $1 category)"


  echo -e "\033[35;4m Infomation \033[m"
  echo "$1"
  echo -e "\033[35;4m Description \033[m"""
  echo "$info_desc"
  echo -e "\033[35;4m Category \033[m"""
  echo "$info_category"
  echo -e "\033[35;4m Requires \033[m"""""
  echo "$info_require"
  echo -e "\033[35;4m Version \033[m"""
  echo "$info_version"

  local status
  echo -e "\033[35;4m Status \033[m"""
  grep "^$1" /etc/setup/installed.db &> /dev/null
  if [ $? -eq 0 ]; then
    echo "Installed (${current_version%.*.*})"
    status=0
  else
    echo "Not installed"
    status=1
  fi
  return $status
}

function medy-install {
  local pkg
  local script

  checkpackages "$@"
  setlab
  echo

  mkdir -p /usr/local/Pharmacy

  for pkg do
    local already="$(grep -c "^$pkg " /etc/setup/installed.db)"
    if [ $already -ge 1 ] && [ -z $force ]; then
      warn "Package $pkg is already installed, skipping"
      continue
    fi
    CURRENT="${CURRENT[@]} $pkg"
  done

  if [ -f /tmp/medy-packages ]; then
    warn "Interrupted resolving deps detected, ignoring."
    rm /tmp/medy-*
  fi

  echo -n "Resolving dependencies..."

  resolve_deps

  RESUME_INSTALL=0
  medy-resume-install
}

function resolve_deps {
  while true
  do
    echo -n "."
    pkgs=${CURRENT[@]}
    CURRENT=""
    hasdeps=0

    for pkg in $pkgs
    do
      if [ -f /tmp/medy-packages ]; then
        local installing="$( grep -c "$pkg" /tmp/medy-packages)"
        [ $installing = 0 ] || continue
      fi

      # look for package and save desc file

      mkdir -p "release/$pkg"
      awk > "release/$pkg/desc" -v package=`echo $pkg` \
        'BEGIN{RS="\n\n@ "; FS="\n"} {if ($1 == package) {desc = $0; px++}} \
        END {if (px == 1 && desc != "") print desc; else print "Package not found"}' \
        setup.ini
      local desc="$(< "release/$pkg/desc")"
      if [ "$desc" = "Package not found" ]; then
        echo; error "Package $pkg not found or ambiguous name, exiting"
        rm -r "release/$pkg"
        rm /tmp/medy-* 2> /dev/null
        exit 1
      fi

      # queue current package

      local install="$(awk '/^install: / { print $2; exit }' "release/$pkg/desc")"
      echo "$mirror/$install" >> /tmp/medy-downloads
      echo "  dir=release/$pkg" >> /tmp/medy-downloads
      echo $pkg >> /tmp/medy-packages
      hasdeps=1

      # resolve dependencies

      local requires="$(grep "^requires: " "release/$pkg/desc" |\
        sed -re 's/^requires: *(.*[^ ]) */\1/g' -e 's/ +/ /g')"

      local warn=0

      if [ -n "$requires" ]; then
        for package in $requires
        do
          local already="$(grep -c "$package " /etc/setup/installed.db)"
          if [ $already = 0 ]; then
            CURRENT=( ${CURRENT[@]} $package )
          fi
        done
      fi

      if [ -z "$install" ]; then
        error "Could not find \"install\" in package description: obsolete package?"
        rm /tmp/medy-*
        exit 1
      fi
    done

    # tailcall

    [ $hasdeps = 0 ] && break
  done
}

function medy-resume-install {
  echo; echo
  if [ ! -f "/tmp/medy-packages" ]; then
    echo "Nothing to install, exiting"
    exit 0
  fi

  echo "Following packages will be installed:"
  for p in $( cat /tmp/medy-packages )
  do
    echo -n $p " "
  done
  echo; ask_user "Do you wish to continue?" || quit

  [ $RESUME_INSTALL = 0 ] || setlab

  # download all

  echo "Start downloading..."
  ${ARIA2C[@]} --input-file /tmp/medy-downloads \
                 `[ "$(cygwin_arch)" = "x86" ] || echo "--deferred-input"` ||  {
    echo -e "\e[1;34mInterrupted:\e[0m To resume installing, run \"medy resume-install\" ."
    exit 1
  }

  # unpack all

  for pkg in $( cat /tmp/medy-packages )
  do

    install="$(awk '/^install: / { print $2; exit }' "release/$pkg/desc")"
    file="$(basename "$install")"
    cd "release/$pkg"

    # check the sha512

    while true
    do
      local digest="$(awk '/^install: / { print $4; exit }' "desc")"
      local digactual="$(sha512sum $file | awk '{print $1}')"
      if [ "$digest" != "$digactual" ]; then
        error "SHA512 sum did not match, retry downloading..."
        aria2c $mirror/$install
      else
        break
      fi
    done

    echo "Unpacking: $pkg"
    tar > "/etc/setup/$pkg.lst" xvf "$file" -C /
    gzip -f "/etc/setup/$pkg.lst"
    cd ../..

    # update the package database

    awk > /tmp/awk.$$ -v pkg="$pkg" -v bz=$file \
      '{if (ins != 1 && pkg < $1) {print pkg " " bz " 0"; ins=1}; print $0} \
      END{if (ins != 1) print pkg " " bz " 0"}' \
      /etc/setup/installed.db
    mv /etc/setup/installed.db /etc/setup/installed.db-save
    mv /tmp/awk.$$ /etc/setup/installed.db
  done

  # run all postinstall scripts

  local pis="$(ls /etc/postinstall/*.sh 2>/dev/null | wc -l)"
  if [ $pis -gt 0 ]; then
    echo Running postinstall scripts...
    for script in /etc/postinstall/*.sh
    do
      $script
      mv $script $script.done
    done
  fi
  quit
}

function quit {
  echo "Removing tmp files..."
  rm /tmp/medy-*
  echo Done.
  exit
}


function medy-list {
    echo 1>&2 The installed packages as follows:
    awk '/[^ ]+ [^ ]+ 0/ {print $1}' /etc/setup/installed.db
}

function medy-remove {
  local pkg
  local req
  valid=0

  setlab
  checkpackages "$@"

  echo

  CURRENT=""
  for pkg in $@
  do
    if [ ! -e "/etc/setup/$pkg.lst.gz" -a -z "$force" ]; then
      echo Package manifest missing, cannot remove $pkg.
      continue
    fi
    valid=1
    CURRENT=( ${CURRENT[@]} $pkg )
  done

  [ $valid = 1 ] || exit -1
  remove-dep
}

function remove-dep {
  local pkg
  REMOVE=""
  do_remove=0

  echo -n Resolving dependencies...

  until [ -z $CURRENT ]
  do
    echo -n .
    pkgs=${CURRENT[@]}
    CURRENT=""

    for p in $pkgs
    do
      already="$(grep -c "^$p " /etc/setup/installed.db)"
      removing=`echo ${REMOVE[@]} | grep -c $p`
      ([ $already -gt 0 ] && [ $removing = 0 ]) || continue

      local dontremove="cygwin coreutils gawk bzip2 tar xz wget aria2 bash"
      for req in $dontremove
      do
        if [ "$p" = "$req" ]; then
          echo; error "medy cannot remove package $p, exiting"
          exit 1
        fi
      done

      REMOVE=( ${REMOVE[@]} $p )
      do_remove=1

      neededby=`awk '
        /^@ / {
          pn = $2
        }
        $0 ~ "^requires: .*"query {
          print pn
        }
        ' query="$p" setup.ini`

      for npkg in $neededby
      do
        CURRENT=( ${CURRENT[@]} $npkg )
      done
    done
  done

  echo; echo

  [ $do_remove = 1 ] || { echo Nothing to remove, exiting; exit; }

  echo Following packages will be removed:
  echo ${REMOVE[@]}
  ask_user "\033[33mDo you wish continue?\033[m" || exit

  for pkg in ${REMOVE[@]};
  do
    echo Removing: $pkg

    if [ -e "/etc/preremove/$pkg.sh" ]; then
      "/etc/preremove/$pkg.sh"
    fi

    gzip -cd "/etc/setup/$pkg.lst.gz" | awk '/[^\/]$/ {print "rm -f \"/" $0 "\""}' | sh
    awk > /tmp/awk.$$ -v pkg="$pkg" '{if (pkg != $1) print $0}' /etc/setup/installed.db
    rm -f "/etc/postinstall/$pkg.sh.done" "/etc/preremove/$pkg.sh" "/etc/setup/$pkg.lst.gz"
    mv /etc/setup/installed.db /etc/setup/installed.db-save
    mv /tmp/awk.$$ /etc/setup/installed.db
  done
  echo Done.
  exit
}

function medy-search {
  local pkg

  checkpackages "$@"
  setlab
  
  for pkg do
    echo ""
    echo "Searching..."
    echo "from installed packages matching $pkg:"
    awk '/[^ ]+ [^ ]+ 0/ {if ($1 ~ query) print $1}' query="$pkg" /etc/setup/installed.db
    if [ "$LOCAL" = 0 ]; then
      echo ""
      echo "from installable packages matching $pkg:"
      awk -v query="$pkg" \
        'BEGIN{RS="\n\n@ "; FS="\n"; ORS="\n"} {if ($1 ~ query) {print $1}}' \
        setup.ini
    fi
  done
}

function medy-uninstall {
  medy-remove "$@"
}

function medy-update {
  setlab
  # grep "^@" $cache/$dir/$arch/setup.ini-save | tr -d '@' > /tmp/medylist-save
  getsetup
  # grep "^@" $cache/$dir/$arch/setup.ini | tr -d '@' > /tmp/medylist
  # local dif="$(diff -u /tmp/medylist-save /tmp/medylist)"
  #
  # if [ ! -z "$dif" ]; then
  #   # if there were some changes => disp pkg name
  #   echo -e "\033[33m==>Updated package\033[m"
  #   echo "$dif" | grep '^\+\s' | sed -e 's/\+ //g'
  # else
  #   echo "setup.ini already latest version"
  # fi

  # rm /tmp/medylist /tmp/medylist-save
}


function verify-remove {
  # TODO
  # avoid duplication in dontremovewithdep

  local dontremove=(cygwin coreutils gawk bzip2 tar xz wget aria2 bash)
  local dontremovewithdep=()

  for dep in ${dontremove[@]}; do
    dontremovewithdep+="$(pkg-depends $dep) "
  done

  dontremove="$(echo $dontremovewithdep | sed -e 's/\s/\n/g' | sort -u | uniq )"

  remove_skip=0
  for req in ${dontremove[@]}; do
    if [[ $1 = $req ]] && [ $remove_skip = 0 ]; then
      warn "medy cannot remove package $1, skipping"
      remove_skip=1
    elif [ $remove_skip = 0 ]; then
      remove_skip=0
    fi
  done
}

function remove-to-upgrade {
  for pkg in $@;
  do
    verify-remove $pkg
    if [ $remove_skip = 0 ]; then
      echo Removing: $pkg
      reinstall+="$pkg "

      if [ -e "/etc/preremove/$pkg.sh" ]; then
        "/etc/preremove/$pkg.sh"
      fi

      gzip -cd "/etc/setup/$pkg.lst.gz" | awk '/[^\/]$/ {print "rm -f \"/" $0 "\""}' | sh
      awk > /tmp/awk.$$ -v pkg="$pkg" '{if (pkg != $1) print $0}' /etc/setup/installed.db
      rm -f "/etc/postinstall/$pkg.sh.done" "/etc/preremove/$pkg.sh" "/etc/setup/$pkg.lst.gz"
      mv /etc/setup/installed.db /etc/setup/installed.db-save
      mv /tmp/awk.$$ /etc/setup/installed.db
    fi
  done
  echo Done.
}

function medy-upgrade {

  setlab
  getsetup

  target=()
  reinstall=()

  if [ $# -gt 1 ]; then
    local s
    local search_list=()
    search_list+="^$1,"
    shift
    for s in "$@";
    do
      search_list+="\|^$s,"
    done
    archive="$(awk 'BEGIN { OFS="," } {print $1, $2}' /etc/setup/installed.db | grep ${search_list[@]} )"
    if [ "${archive[@]}" = "" ]; then
      error "Given packages \"${archive[@]}\" not installed, exiting"
      exit 1
    fi
  elif [ $# -gt 0 ]; then
    archive="$(awk 'BEGIN { OFS="," } {print $1, $2}' /etc/setup/installed.db | grep "$1")"
    if [ "${archive[@]}" = "" ]; then
      error "Given package \"${archive[@]}\" does not installed, exiting"
      exit 1
    fi
  else
    archive="$(awk 'BEGIN { OFS="," } {print $1, $2}' /etc/setup/installed.db | tail -n +2 )"
  fi

  if [ ! -e $cache/$dir$arch/setup.ini ]; then
    error "File not found: 'setup.ini', exiting"
    exit 1
  fi

  echo "@ " >> $cache/$dir$arch/setup.ini

  echo -e "\033[36;4mChecking package update...\033[m"
  for acv in $archive;
  do
    export pkgname="$(echo "$acv" | awk -F, '{print $1}')"
    tarfile="$(echo "$acv" | awk -F, '{print $2}')"
    tarbase="${tarfile%.*.*}"
    # tarcurrent="$(grep -wA22 "^@ $pkgname" $cache/$dir/$arch/setup.ini |\
    #   sed -e 's/^@\s//' | sed '/@/,$d'| sed '/prev/,$d' |\
    #   grep 'install: ' | sed -e 's/install: //g' | awk '{print $1}')"
    tarcurrent="$(perl -ne 'print if /^@ \Q$ENV{pkgname}\E\n/.../^@ /' $cache/$dir$arch/setup.ini |\
      sed '$d' | sed '/prev/,$d' | grep 'install: ' |\
      sed -e 's/install: //g' | awk '{print $1}')"
    infocurrent="${tarcurrent##*/}"
    tarcurrent="${infocurrent%.*.*}"

    if [ "$tarcurrent" != "$tarbase" ]; then
      echo -e "$tarbase \033[32m==>\033[m $tarcurrent"
      target+="$pkgname "
    fi
  done

  sed -i '$d' $cache/$dir$arch/setup.ini

  if [ $DRY_RUN = 1 ]; then
    exit 0
  elif [[ "${target[@]}" = "" ]]; then
    echo -e "\033[35mNo Package(s) update, done.\033[m"
  else
    echo -e;  ask_user "\033[33mDo you wish upgrade?\033[m" || exit 1

    # backup
    echo ${target[@]} > $cache/$dir$arch/medy-update-target.dat

    # TODO
    # implement resume-upgrade

    echo -e "\033[36;4mStart Removing...\033[m"
    remove-to-upgrade "$(echo ${target[@]})"
    echo -e "\033[36;4mStart Reinstalling...\033[m"
    medy-install "$(echo ${reinstall[@]})"

    # if [ $? = 0 ]; then
    #   rm $cache/$dir/$arch/medy-update-target.dat
    # fi
  fi
}

function medy-upgrade-self {
  mv $medy $lab_dir/medy.orig
  get -O $medy "https://raw.githubusercontent.com/nobuyo/medy/master/medy"
  if [ $? -ne 0 ]; then
    error "medy Could not found, reverting"
    mv $lab_dir/medy.orig $medy
    exit 1
  fi

  chmod +x $medy
  success "Updated medy"
}


  # ._ _  _  _|
  # | | |(/_(_|\/
  #            /


medylogo="
  ._ _  _  _\033[31m|\033[m
\033[31m  | | |\033[m(/_(_\033[31m|\033[m\033[34m\/\033[m
             /
"
function medy-version {
  echo -e "$medylogo"
  echo "  version 0.5.8-beta"
}
#> cat ./bin/perl-module/*.sh | perl -ne 'print unless /^#!/'

function pkg-depends {
perl -e "$(cat <<'EOC'
# 
#   pkg-depends.pl -- show the depended packages of given package name
# 
# args:
#   $package_name <- $ARGV[0]
# 
# input:
#   if a enviroment variable 'SETUP_INI_FILE_PATH' is exported, input from its file.
#   otherwise, input from stdin.
#   how output the nested all requirements of Vim is as follows:
# 
#       cat /path/to/setup.ini | perl pkg-depends.pl vim
#   or
#       export SETUP_INI_FILE_PATH=/path/to/setup.ini
#       perl pkg-depends.pl vim
# 
# return:
#   print the depended packages of given package name.
#   return -1 if package name is not found in file $ENV{'SETUP_INI_FILE_PATH'}.
# 

use strict;
use warnings;
use File::Basename;

package PkgDepends;

sub usage {
	my $script_name = $0;
	print "Usage\n";
	print "  \"perl $script_name <package>\"   to show dependencies of package\n";
	exit;
}

# create requirements table
# return the structure like:
# 
#     (
#         '4ti2-debuginfo' => ['cygwin-debuginfo'],
#         'a2ps'           => ['bash', 'libiconv2', 'libintl8', 'libpaper1', ..., 'cygwin'],
#           :
#         'zsh'            => ['cygwin', 'libncursesw10', 'libpcre1', 'libiconv2', 'libgdbm4', '_update-info-dir']
#     )
# 
sub create_requirements_table {
	my %pkg_requirements_table = ();

	# select input (file or stdin)
	my $in;
	my $target_file = $ENV{'SETUP_INI_FILE_PATH'};
	if ($target_file) {
		open($in, "< $target_file") or die("could not open file \"$target_file\"");
	} else {
		$in = *STDIN
	}

	my $pkg_name;
	my @pkg_requires;
	while (<$in>) {
		if (/^@ (.*)$/) {
			$pkg_name = $1;
		}

		if (/^requires: (.*)$/) {
			@pkg_requires = split(/\s+/, $1);
			@{$pkg_requirements_table{$pkg_name}} = @pkg_requires;
		}
	}
	\%pkg_requirements_table;
}

# fetch the package all nested dependency
# 
# args:
#   $pkg_requirements_table - requirements table, see create_requirements_table().
#   $require_pkgs           - empty hash, this function stores the required packages to the hash.
#   $pkg_name               - package name, to fetch its dependent packages.
#   $nest                   - nest level, starts with 0
# 
# return:
#   nothing
# 
sub fetch_pkg_depends {
	my ($pkg_requirements_table, $require_pkgs, $pkg_name, $nest) = @_;
	my @requires = @{ $pkg_requirements_table->{$pkg_name} || [] };

	# print "begin: $nest\n";
	# print join(' ', keys %require_pkgs) . "\n";

	foreach (@requires) {
		my $require_pkg = $_;
		my $marked_pkg  = \$require_pkgs->{$_};
		next if (defined $$marked_pkg && $$marked_pkg == 1); # already marked
		$$marked_pkg = 1; # mark
		fetch_pkg_depends(\%$pkg_requirements_table, \%$require_pkgs, $require_pkg, $nest + 1); # recursion
	}

	# print "end: $nest\n";
}

if (__FILE__ eq $0) {
	usage() if ($#ARGV == -1);
	my $pkg_name = $ARGV[0];
	my %pkg_requirements_table = %{ create_requirements_table() };
	my %require_pkgs = ();

	fetch_pkg_depends(\%pkg_requirements_table, \%require_pkgs, $pkg_name, 0);

	# print "---\n";
	print join("\n", keys %require_pkgs) . "\n";
} else {
	1;
}



EOC
)" -- $@
}

function setup-parser {
perl -e "$(cat <<'EOC'
# 
#   setup-parser.pl -- perser to read setup.int
# 
# args:
#   $package_name <- $ARGV[0]
#   $tag_name     <- $ARGV[1]
#     where $tag_name = 'sdesc', 'ldesc', 'category', 'requires', 'version', 'install', undef
# 
# input:
#   if a enviroment variable 'SETUP_INI_FILE_PATH' is exported, input from its file.
#   otherwise, input from stdin.
#   how output the requirements of Vim is as follows:
#   
#       cat /path/to/setup.ini | perl setup-parser.pl vim requires
#   or
#       export SETUP_INI_FILE_PATH=/path/to/setup.ini
#       perl setup-parser.pl vim requires
# 
# return:
#   return -1 if package name is not found in input.
#   return -1 if tag name is invalid.
#   if $tag_name is not specified, print $package_name's info.
#   otherwise, print the tagged content of $package_name.
# 

use strict;
use warnings;

package SetupParser;

sub usage {
	my $script_name = $0;
	print "$script_name: perser to read setup.int\n";
	print "Usage:\n";
	print "  perl $script_name <package>         to show package info\n";
	print "  perl $script_name <package> <tag>   to show tagged content on package info\n";
	print "<tag>:\n";
	print "  sdesc  ldesc  category  requires  version  install\n";
	exit;
}

sub format_pkg_all_info {
	my ($pkg_info) = @_;
	my @each_lines = (
		"sdesc: "    . $pkg_info->{'sdesc'},
		"ldesc: \n"  . join("", @{ $pkg_info->{'ldesc'} }),
		"category: " . $pkg_info->{'category'},
		"requires: " . $pkg_info->{'requires'},
		"version: "  . $pkg_info->{'version'},
		"install: "  . $pkg_info->{'install'},
		"" # ends with \n
	);
	return join("\n", @each_lines);
}

sub format_pkg_info {
	my ($pkg_info, $tag) = @_;
	
	unless (defined $tag) {
		return format_pkg_all_info(\%$pkg_info);
	}

	if (ref $pkg_info->{$tag} eq 'ARRAY') {
		return join('', @{$pkg_info->{$tag}});
	} else {
		return "$pkg_info->{$tag}\n";
	}
}

# check if the tag name is valid
sub validate_tag_name {
	$_[0] =~ /^(?:requires|sdesc|ldesc|category|version|install)$/;
}

sub extract_from_setup_init {
	my ($pkg_name) = @_;
	# use for loop
	my $found_pkg = 0; # false
	my %pkg_info = (
		'sdesc' => '',
		'ldesc' => [
			# each lines
		],
		'category' => '',
		'requires' => '',
		'version' => '',
		'install' => ''
	);
	# use for extracting ldesc
	my $on_ldesc = 0; # false

	# select input (file or stdin)
	my $in;
	my $target_file = $ENV{'SETUP_INI_FILE_PATH'};
	if ($target_file) {
		open($in, "< $target_file") or die("could not open file \"$target_file\"");
	} else {
		$in = *STDIN;
	}

	while (<$in>) {
		# find package name
		if (/^@ \Q$pkg_name\E$/) {
			$found_pkg = 1; # true
			next;
		}

		next unless ($found_pkg);

		# if package is found, tries matching as follows:

		# sdesc
		if (/^sdesc: "([^"]*+)"$/) {
			$pkg_info{'sdesc'} = $1;
			next;
		}

		# ldesc
		if (/^ldesc: "/) {
			$on_ldesc = 1; # true
		}
		if (/^ldesc: "([^"]*+)("?)$/) {
			push(@{$pkg_info{'ldesc'}}, $1);
			# when double quote is on end of line, on_ldesc is false.
			$on_ldesc = 0 if ($2);
			next;
		}
		if ($on_ldesc && /^([^"]*+)("?)$/) {
			push(@{$pkg_info{'ldesc'}}, $1);
			# when double quote is on end of line, on_ldesc is false.
			$on_ldesc = 0 if ($2);
			next;
		}

		# category, requires, version, install
		if (/^(category|requires|version|install): ([^\n]*+)$/) {
			$pkg_info{$1} = $2;
			next;
		}

		# ignore [prev] info
		last if (/^\[prev\]$/);
		# ignore next package
		last if (/^@ /);
	}

	unless ($found_pkg) {
		print STDERR "no such a package: $pkg_name\n";
		exit -1;
	}

	\%pkg_info;
}

sub extract {
	extract_from_setup_init @_;
}


if (__FILE__ eq $0) {
	usage() if ( $#ARGV == -1 );
	my $pkg_name = $ARGV[0];
	my $tag_name = $ARGV[1];
	my $pkg_info = extract_from_setup_init($pkg_name);

	if (defined $tag_name && !validate_tag_name($tag_name)) {
		print STDERR "no such a tag: $tag_name\n";
		exit -1;
	}

	if (defined $tag_name) {
		print format_pkg_info(\%$pkg_info, "$tag_name");
	} else {
		print format_pkg_info(\%$pkg_info);
	}
} else {
	1;
}

EOC
)" -- $@
}

function include {
  if [ "$DEPLOY" = 'true' ]; then return; fi
  for file in $@; do
    test -f "$file" && source "$file"
  done
}

include ./bin/common.sh
include ./bin/perl-module/*.sh
include ./bin/medy-*.sh

OPT_FILES=()
SUBCOMMAND=""
YES_TO_ALL=false
LOCAL=0
force=""
DRY_RUN=false
noisy_view=0
INITIAL_ARGS=( "$@" )
ARGS=()
while [ $# -gt 0 ]
do
  case "$1" in

    --force)
      force=1
      shift
    ;;

    --mirror|-m)
      echo "${2%/}/" > /etc/setup/last-mirror
      shift ; shift
    ;;

    --yes-to-all|-y)
      YES_TO_ALL=1
      shift
    ;;

    --local)
      LOCAL=1
      shift
    ;;

    --dry-run|-n)
      DRY_RUN=1
      shift
    ;;

    --verbose|-v)
      noisy_view=1
      shift
    ;;

    --help)
      medy-help
      exit 0
    ;;

    --version|-V)
      medy-version
      exit 0
    ;;

    *)
      if [ -z "$SUBCOMMAND" ]; then
        SUBCOMMAND="$1"
      else
        ARGS+=( "$1" )
      fi
      shift
    ;;
  esac
done

for file in "${OPT_FILES[@]}"
do
  if [ -f "$file" ]; then
    readarray -t -O ${#ARGS[@]} ARGS < "$file"
  else
    warn "File $file not found, skipping"
  fi
done

if [ `cygwin_arch` = "x86" ]; then
  warn "x86 env detected: aria2 can't use --conditional-get, always download and overwrite"
  ARIA2C=( "aria2c" "--allow-overwrite=true" )
else
  ARIA2C=( "aria2c" "--conditional-get" "--allow-overwrite" )
fi

function suggest_subcommand {
  local CORRECT=""
  case "$1" in
    intsall|instll|insatall|instoll)
      CORRECT="install"
      ;;

    remobe|rimove|remov|rmove)
      CORRECT="remove"
      ;;

    updare|updade|uodate)
      CORRECT="update"
      ;;

    uograde)
      CORRECT="upgrade"
      ;;

    kist|lisr|last)
      CORRECT="list"
      ;;

    serach|seatch|fnid|finf)
      CORRECT="search"
      ;;
    
    indo|imfo)
      CORRECT="info"
      ;;

    update-self|uograde-self|upgradeself|upgrade-sekf)
      CORRECT="upgrade-self"
      ;;

    varsion|vertion)
      CORRECT="version"
      ;;

    *)
      exit 1
      ;;

  esac
  echo; echo "Did you mean this?"
  echo -ne "\033[36m==> \033[m"
  ask_user "medy $CORRECT ${ARGS[@]}" || exit 1
  invoke_subcommand "$CORRECT" "${ARGS[@]}"

}

function invoke_subcommand {
  local SUBCOMMAND="${@:1:1}"
  local ARGS=( "${@:2}" )
  local ACTION="medy-${SUBCOMMAND:-help}"
  if type "$ACTION" &>/dev/null; then
    "$ACTION" "${ARGS[@]}"
  else
    error "unknown command: $SUBCOMMAND"
    suggest_subcommand $SUBCOMMAND
  fi
}

invoke_subcommand "$SUBCOMMAND" "${ARGS[@]}"
